@use '../../foundations/spacing/tokens.scss' as spacing;
@use '../../foundations/breakpoints/mixins.scss' as breakpoints;

@mixin mobile-dialog-width {
  width: calc(spacing.$spacing-dialog-xs - (2 * spacing.$spacing-sm));

  @include breakpoints.breakpoint-max('sm') {
    padding: spacing.$spacing-md spacing.$spacing-sm;
  }
}

.fudis-dialog {
  box-sizing: content-box;
  position: relative;
  padding: spacing.$spacing-md spacing.$spacing-xl;
  /* stylelint-disable-next-line unit-disallowed-list */
  max-width: calc(100vw - 10rem);

  &__close {
    float: right;

    &__absolute {
      position: absolute;
      right: spacing.$spacing-xl;

      @include breakpoints.breakpoint-max('sm') {
        right: spacing.$spacing-sm;
      }
    }
  }

  &__size {
    &__xs {
      @include mobile-dialog-width;
    }

    &__sm {
      @include mobile-dialog-width;

      @include breakpoints.breakpoint('sm') {
        width: calc(spacing.$spacing-dialog-sm - (2 * spacing.$spacing-xl));
      }
    }

    &__md {
      @include mobile-dialog-width;

      @include breakpoints.breakpoint('sm') {
        width: calc(spacing.$spacing-dialog-md - (2 * spacing.$spacing-xl));
      }
    }

    &__lg {
      @include mobile-dialog-width;

      @include breakpoints.breakpoint('sm') {
        width: calc(spacing.$spacing-dialog-lg - (2 * spacing.$spacing-xl));
      }

      @include breakpoints.breakpoint('lg') {
        /* stylelint-disable-next-line unit-disallowed-list */
        max-width: calc(100vw - 15rem);
      }
    }

    &__xl {
      @include mobile-dialog-width;

      @include breakpoints.breakpoint('sm') {
        width: calc(spacing.$spacing-dialog-xl - (2 * spacing.$spacing-xl));
      }

      @include breakpoints.breakpoint('lg') {
        /* stylelint-disable-next-line unit-disallowed-list */
        max-width: calc(100vw - 15rem);
      }
    }
  }
}
