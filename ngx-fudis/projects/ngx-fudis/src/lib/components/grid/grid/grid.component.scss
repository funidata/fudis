/* stylelint-disable order/order */
@use '@funidata/fudis-core' as core;

.fudis-grid {
  box-sizing: border-box;
  display: grid;
  grid-template-rows: auto 1fr;
  grid-template-columns: auto 1fr;

  @include core.breakpoint('sm') {
    width: 100%;
  }

  &__align {
    &__start {
      margin-right: auto;
      margin-left: 0;
    }

    &__center {
      margin-right: auto;
      margin-left: auto;

      @include core.breakpoint-max('sm') {
        @include core.grid-xs-margins;
      }
    }

    &__end {
      margin-right: 0;
      margin-left: auto;
    }
  }

  /*
	By default Grid's @Input width is XXL. When viewport gets narrower, it will get corresponding max-widths of each smaller breakpoint from XXL to smallest XS.

	On the other end, if @Input width is the smallest of XS, it gets only one max-width of XS and doesn't need any other breakpoint width logic.
	*/

  &__xxl {
    @include core.breakpoint('xs') {
      @include core.grid-max-width('xs');
    }

    @include core.breakpoint('sm') {
      @include core.grid-max-width('sm');
    }

    @include core.breakpoint('md') {
      @include core.grid-max-width('md');
    }

    @include core.breakpoint('lg') {
      @include core.grid-max-width('lg');
    }

    @include core.breakpoint('xl') {
      @include core.grid-max-width('xl');
    }

    @include core.breakpoint('xxl') {
      @include core.grid-max-width('xxl');
    }
  }

  &__xl {
    @include core.breakpoint('xs') {
      @include core.grid-max-width('xs');
    }

    @include core.breakpoint('sm') {
      @include core.grid-max-width('sm');
    }

    @include core.breakpoint('md') {
      @include core.grid-max-width('md');
    }

    @include core.breakpoint('lg') {
      @include core.grid-max-width('lg');
    }

    @include core.breakpoint('xl') {
      @include core.grid-max-width('xl');
    }
  }

  &__lg {
    @include core.breakpoint('xs') {
      @include core.grid-max-width('xs');
    }

    @include core.breakpoint('sm') {
      @include core.grid-max-width('sm');
    }

    @include core.breakpoint('md') {
      @include core.grid-max-width('md');
    }

    @include core.breakpoint('lg') {
      @include core.grid-max-width('lg');
    }
  }

  &__md {
    @include core.breakpoint('xs') {
      @include core.grid-max-width('xs');
    }

    @include core.breakpoint('sm') {
      @include core.grid-max-width('sm');
    }

    @include core.breakpoint('md') {
      @include core.grid-max-width('md');
    }
  }

  &__sm {
    @include core.breakpoint('xs') {
      @include core.grid-max-width('xs');
    }

    @include core.breakpoint('sm') {
      @include core.grid-max-width('sm');
    }
  }

  &__initial {
    width: initial;
  }

  &__xs {
    @include core.grid-max-width('xs');
  }

  &__row-gap {
    &__none {
      row-gap: core.$spacing-none;
    }

    &__xxs {
      row-gap: core.$spacing-xxs;
    }

    &__xs {
      row-gap: core.$spacing-xs;
    }

    &__sm {
      row-gap: core.$spacing-sm;
    }

    &__md {
      row-gap: core.$spacing-md;
    }

    &__lg {
      row-gap: core.$spacing-lg;
    }

    &__xl {
      row-gap: core.$spacing-xl;
    }

    &__xxl {
      row-gap: core.$spacing-xxl;
    }
  }

  &__column-gap {
    &__none {
      column-gap: core.$spacing-none;
    }

    &__xxs {
      column-gap: core.$spacing-xxs;
    }

    &__xs {
      column-gap: core.$spacing-xs;
    }

    &__sm {
      column-gap: core.$spacing-sm;
    }

    &__md {
      column-gap: core.$spacing-md;
    }

    &__lg {
      column-gap: core.$spacing-lg;
    }

    &__xl {
      column-gap: core.$spacing-xl;
    }

    &__xxl {
      column-gap: core.$spacing-xxl;
    }
  }
}
