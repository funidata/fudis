// import { Component, importProvidersFrom } from '@angular/core';
// import { ReactiveFormsModule, FormsModule, FormControl } from '@angular/forms';
// import { StoryFn, Meta, applicationConfig, moduleMetadata } from '@storybook/angular';
// import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
// import { FudisTranslationService } from '../../../../services/translation/translation.service';
// import { DateRangeComponent } from './date-range.component';
// import { FudisValidators } from '../../../../utilities/form/validators';
// import docs from './daterange-docs.mdx';
// import { daterangeExclude } from '../../../../utilities/storybook';

// @Component({
//   selector: 'example-language-change-component',
//   template: `<fudis-button [label]="_label" (handleClick)="changeLanguage()"></fudis-button>`,
// })
// class LanguageChangeComponent {
//   constructor(private _translationService: FudisTranslationService) {
//     this._translationService.setLanguage('en');
//   }

//   protected _label = 'Change calendar language';

//   changeLanguage(): void {
//     if (this._translationService.getLanguage() === 'en') {
//       this._translationService.setLanguage('fi');
//     } else {
//       this._translationService.setLanguage('en');
//     }
//   }
// }

// export default {
//   title: 'Components/Form/Date/Date Range',
//   component: DateRangeComponent,
//   decorators: [
//     moduleMetadata({
//       declarations: [LanguageChangeComponent],
//       imports: [ReactiveFormsModule, FormsModule],
//     }),
//     applicationConfig({
//       providers: [importProvidersFrom(BrowserAnimationsModule)],
//     }),
//   ],
//   parameters: {
//     docs: {
//       page: docs,
//     },
//     controls: {
//       exclude: daterangeExclude,
//     },
//   },
// } as Meta;

// const html = String.raw;

// const TemplateDateRange: StoryFn<DateRangeComponent> = (args: DateRangeComponent) => ({
//   props: {
//     ...args,
//     startDate: {
//       label: 'Start date',
//       helpText: 'Select start date',
//       tooltip: 'Tooltip for first',
//       control: new FormControl<Date | null>(
//         null,
//         FudisValidators.required('Start date is required'),
//       ),
//     },
//     endDate: {
//       label: 'End date',
//       helpText: 'Select end date',
//       control: new FormControl<Date | null>(null, FudisValidators.required('End date is required')),
//     },
//   },
//   template: html`<fudis-date-range
//     [startDate]="startDate"
//     [endDate]="endDate"
//   ></fudis-date-range> `,
// });

// export const DateRange = TemplateDateRange.bind({});

// const TemplateWithMinMax: StoryFn<DateRangeComponent> = (args: DateRangeComponent) => ({
//   props: {
//     ...args,
//     startDate: {
//       label: 'Start date',
//       helpText: 'Select start date',
//       tooltip: 'Tooltip for first',
//       control: new FormControl<Date | null>(null, [
//         FudisValidators.required('Start date is required'),
//         FudisValidators.datepickerMin({
//           value: new Date(2023, 4, 15),
//           message: 'Start date cannot be earlier than 15.5.2023',
//         }),
//         FudisValidators.datepickerMax({
//           value: new Date(2023, 5, 20),
//           message: 'Start date cannot be later than 20.6.2023',
//         }),
//       ]),
//     },
//     endDate: {
//       label: 'End date',
//       helpText: 'Select end date',
//       control: new FormControl<Date | null>(null, [
//         FudisValidators.required('End date is required'),
//         FudisValidators.datepickerMin({
//           value: new Date(2023, 5, 15),
//           message: 'End date cannot be earlier than 15.6.2023',
//         }),
//         FudisValidators.datepickerMax({
//           value: new Date(2023, 7, 25),
//           message: 'End date cannot be later than 25.7.2023',
//         }),
//       ]),
//     },
//   },
//   template: html`
//     <fudis-date-range
//       [startDate]="startDate"
//       [endDate]="endDate"
//     /><example-language-change-component />
//   `,
// });

// export const WithMinMaxValidator = TemplateWithMinMax.bind({});
