import {
  AfterViewInit,
  ChangeDetectorRef,
  DestroyRef,
  Directive,
  ElementRef,
  EventEmitter,
  inject,
  Input,
  Output,
  ViewChild,
} from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { TooltipApiDirective } from '../../tooltip/tooltip-api.directive';
import { FudisIdComponent, FudisIdParent } from '../../../types/id';
import { FudisIdService } from '../../../services/id/id.service';

@Directive({
  selector: '[fudisFormCommonApi]',
})
export class FormCommonApiDirective extends TooltipApiDirective implements AfterViewInit {
  constructor(
    protected _idService: FudisIdService,
    protected _cdr: ChangeDetectorRef,
  ) {
    super();
  }

  /**
   * Template reference for input. Used in e. g. initialFocus
   */
  @ViewChild('inputRef') protected _inputRef: ElementRef<HTMLInputElement>;

  /**
   * Label for the form component.
   */
  @Input({ required: true }) label: string;

  /**
   * Provide additional information for screen reader users by extending text content of the label. Used in e. g. input with language options for providing info about currently selected language.
   */
  @Input() ariaLabel: string;

  /**
   * Input id. If not provided when component is initialized, generated by Id Service
   */
  @Input() id: string;

  /**
   * If component is a child of Form component, Form's Error Summary is visible, this component's control has errors and when this component is loaded for the first time, it will by default call Error Summary to reload itself again and mark control as touched. This is because if component is lazy loaded to the DOM after the initial reload errors call was made, errors of this component might not appear on the list. To disable this feature, set this to false.
   */
  @Input() errorSummaryReloadOnInit: boolean = true;

  // TODO: Remove so that disabling is done straight from control/group

  /**
   * Option for disabling the input.
   */
  @Input() disabled: boolean = false;

  /**
   * Help text, aligned underneath the input.
   */
  @Input() helpText: string | undefined;

  /**
   * Set input's visual style and attributes as invalid. Does not override if control.invalid is true.
   */
  @Input() invalidState: boolean = false;

  /**
   * Set browser focus to the input on the first load.
   */
  @Input() initialFocus: boolean = false;

  /**
   * Disable guidance for this component instance. No help text or errors will be visible.
   */
  @Input() disableGuidance: boolean;

  /**
   * To listen for component's blur event.
   */
  @Output() handleBlur: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();

  /**
   * To listen for component's focus event.
   */
  @Output() handleFocus: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();

  /**
   * To listen for input's key up event.
   */
  @Output() handleKeyUp: EventEmitter<KeyboardEvent> = new EventEmitter<KeyboardEvent>();

  /**
   * Output emitted when component has finished AfterViewInit lifecycle hook
   */
  @Output() handleViewInit: EventEmitter<void> = new EventEmitter<void>();

  /**
   * Set requiredText based on this boolean value
   */
  protected _required = new BehaviorSubject<boolean>(false);

  protected _destroyRef = inject(DestroyRef);

  /**
   * Trigger update when control validator is changed
   */
  protected _updateValueAndValidityTrigger = new Subject<void>();

  /**
   * To trigger Error Summary reload when this component's children Validator Error Messages are initialised. This is used in cases when this component is lazy loaded to DOM after initial Error Summary reload was called before children Validator Error Messages existed. E. g. if component is inside lazy loaded expandable.
   */
  protected _reloadErrorSummaryTrigger = false;

  /**
   * Generate id for parent component
   */
  protected _setParentComponentId(parentType: FudisIdParent): void {
    if (this.id) {
      this._idService.addNewParentId(parentType, this.id);
    } else {
      this.id = this._idService.getNewParentId(parentType);
    }
  }

  /**
   * Add given id to Id Service or generate unique id
   */
  protected _setComponentId(componentType: FudisIdComponent): void {
    if (this.id) {
      this._idService.addNewId(componentType, this.id);
    } else {
      this.id = this._idService.getNewId(componentType);
    }
  }

  /**
   * TODO: write test check cdr logic
   *
   * Tell Guidance, that this component has errors which were not loaded to Error Summary, if component was initialised after parent's Error Summary was set to visible.
   */
  protected _triggerErrorSummaryOnInitReload(
    parentFormErrorSummaryVisible: boolean | undefined,
    controlOrGroupInvalid: boolean,
  ): void {
    if (this.errorSummaryReloadOnInit && parentFormErrorSummaryVisible && controlOrGroupInvalid) {
      this._reloadErrorSummaryTrigger = true;
      this._cdr.detectChanges();
    }
  }

  protected _afterViewInitCommon(): void {
    if (this.initialFocus) {
      this._inputRef?.nativeElement?.focus();
    }
    this.handleViewInit.emit();
  }

  ngAfterViewInit(): void {
    this._afterViewInitCommon();
  }

  /**
   * Set focus to the input element
   */
  public focusToInput(): void {
    this._inputRef?.nativeElement?.focus();
  }

  /**
   * Executed when component's input is focused or when child input, e.g. Checkbox is focused
   */
  public onFocus(event: FocusEvent): void {
    if (this._reloadErrorSummaryTrigger) {
      this._reloadErrorSummaryTrigger = false;
    }

    this.handleFocus.emit(event);
  }
}
